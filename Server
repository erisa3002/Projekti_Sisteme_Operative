#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define MAX_CLIENTS 5
#define BUFFER_SIZE 1024

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int connectedClients = 0;

typedef struct {
    int clientSocket;
    struct sockaddr_in clientAddr;
} ClientInfo;

void *clientHandler(void *arg) {
    ClientInfo *clientInfo = (ClientInfo *)arg;
    int clientSocket = clientInfo->clientSocket;
    struct sockaddr_in clientAddr = clientInfo->clientAddr;
    char buffer[BUFFER_SIZE];
    char clientIP[INET_ADDRSTRLEN];

    inet_ntop(AF_INET, &(clientAddr.sin_addr), clientIP, INET_ADDRSTRLEN);

    char connectMsg[] = "Jeni të lidhur me Server.";
    send(clientSocket, connectMsg, strlen(connectMsg), 0);

  
    pthread_mutex_lock(&mutex);
    connectedClients++;
    printf("\nKlienti u Lidh, IP: %s\n", clientIP);
    printf("\nTotali i Klienteve te Lidhur: %d\n", connectedClients);
    pthread_mutex_unlock(&mutex);
    
    while (recv(clientSocket, buffer, BUFFER_SIZE, 0) > 0) {
        if (strcmp(buffer, "shkeput") == 0) {
            printf("\nKlienti Kërkon të Shkeputet: %s\n", clientIP);
            break;
        }
 
        char responseMsg[] = "Serveri po Komunikon me Ju.";
        send(clientSocket, responseMsg, strlen(responseMsg), 0);
    }

    pthread_mutex_lock(&mutex);
    connectedClients--;
    printf("\nKlienti u Shkëput, IP: %s\n", clientIP);
    printf("\nTotali i Klientëve të Lidhur: %d\n", connectedClients);
    pthread_mutex_unlock(&mutex);

    close(clientSocket);

    free(clientInfo);
    pthread_exit(NULL); 
    }
    
    int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t clientAddrLen;
    pthread_t tid;


    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0) {
        perror("\nKrijimi i Socket-it Dështoj");
        exit(EXIT_FAILURE);
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(8080);

    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("\nLidhja Dështoj");
        exit(EXIT_FAILURE);
    }

    if (listen(serverSocket, MAX_CLIENTS) < 0) {
        perror("\nDegjimi Dështoj");
        exit(EXIT_FAILURE);
    }

    printf("\nServeri u Startua. Në Pritje për Klientë...\n");

    while (1) {
       
        clientAddrLen = sizeof(clientAddr);
        clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &clientAddrLen);
        if (clientSocket < 0) {
            perror("\nPranimi Dështoj");
            exit(EXIT_FAILURE);
        }

        ClientInfo *clientInfo = (ClientInfo *)malloc(sizeof(ClientInfo));
        clientInfo->clientSocket = clientSocket;
        clientInfo->clientAddr = clientAddr;
        if (pthread_create(&tid, NULL, clientHandler, (void *)clientInfo) != 0) {
            perror("\nKrijimi i Thread-it Dështoj");
            exit(EXIT_FAILURE);
        }

        pthread_detach(tid);
    }

    close(serverSocket);

    return 0;
}
